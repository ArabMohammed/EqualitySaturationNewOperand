use crate::fhelang::{ConstantFold, FheLang};
use egg::rewrite as rw;
use egg::*;
pub fn axiomatic_rules(slot_count: usize) -> Vec<Rewrite<FheLang, ConstantFold>> {
    // Add your implementation here
    
    let rules: Vec<Rewrite<FheLang, ConstantFold>> = vec![
        rw!("add-comm"      ; "(+ ?a ?b)"                   => "(+ ?b ?a)"),
        rw!("neg-neg"; "(- (-  ?a))" => "?a"),
        rw!("add-assoc"     ; "(+ ?a (+ ?b ?c))"            => "(+ (+ ?a ?b) ?c)"),
        rw!("add-zero"      ; "(+ ?a 0)"                    => "?a"),
        rw!("add-dist-mul"  ; "(* ?a (+ ?b ?c))"            => "(+ (* ?a ?b) (* ?a ?c))"),
        rw!("add-fact-mul"  ; "(+ (* ?a ?b) (* ?a ?c))"     => "(* ?a (+ ?b ?c))"),
        rw!("sub-to-add"; "(- ?a ?b)"   => "(+ ?a (- 0 ?b))"),
        rw!("mul-comm"      ; "(* ?a ?b)"                   => "(* ?b ?a)"),
        rw!("mul-assoc"     ; "(* ?a (* ?b ?c))"            => "(* (* ?a ?b) ?c)"),
        rw!("mul-zero"      ; "(* ?a 0)"                    => "0"),
        rw!("mul-one"       ; "(* ?a 1)"                    => "?a"),
        rw!("mul-m-one"       ; "(* ?a -1)"                    => "(- ?a)"),
        rw!("square"       ; "(* ?a ?a)"                    => "(square ?a)"), 
        rw!("rotate_0"; "(<< ?x 0)" => "?x"),
        rw!("part-fold-rotate-add-1"; "(<< (+ ?x ?c0) ?n)" => "(+ (<< ?x ?n) (<< ?c0 ?n))"),
        rw!("part-fold-rotate-sub-1"; "(<< (- ?x ?c0) ?n)" => "(- (<< ?x ?n) (<< ?c0 ?n))"),
        rw!("part-fold-rotate-mul-1"; "(<< (* ?x ?c0) ?n)" => "(* (<< ?x ?n) (<< ?c0 ?n))"),
        rw!("fold-rotate"; "(<< (<< ?x ?n) ?m)" =>{format!("(<< ?x (% (+ ?m ?n) {}))",slot_count).parse::<Pattern<_>>().unwrap() } ),
        rw!("undo-nest-rotate-add-1"; "(<< (+ ?x (<< ?y ?n)) ?m)" => {format!("(+ (<< ?x ?m) (<< ?y (% (+ ?n ?m) {})))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-sub-1"; "(<< (- ?x (<< ?y ?n)) ?m)" => {format!("(- (<< ?x ?m) (<< ?y (% (+ ?n ?m)  {})))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-mul-1"; "(<< (* ?x (<< ?y ?n)) ?m)" => {format!("(* (<< ?x ?m) (<< ?y (% (+ ?n ?m) {})))",slot_count).parse::<Pattern<_>>().unwrap() }),
    ];
    return rules;
}

/**************************************************************************************/
/**************************************************************************************/

pub fn specific_rules(slot_count: usize) -> Vec<Rewrite<FheLang, ConstantFold>> {
    let rules: Vec<Rewrite<FheLang, ConstantFold>> = vec![
        rw!("add_0-1"; "(+ ?x 0)" => "?x"),
        rw!("add_0-2"; "(+ 0 ?x)" => "?x"),
        rw!("sub_0"; "(- ?x 0)" => "?x"),
        rw!("sub_self"; "(- ?x ?x)" => "0"),
        rw!("mul_0-1"; "(* 0 ?x)" => "0"),
        rw!("mul_0-2"; "(* ?x 0)" => "0"),
        rw!("simplify-add-negate-1-1"; "(+ ?x (- ?y))" => "(- ?x ?y)"),
        rw!("simplify-add-negate-1-2"; "(+ (- ?y) ?x)" => "(- ?x ?y)"),
        rw!("simplify-add-sub-1-1"; "(+ (- ?x ?y) ?y)" => "?x"),
        rw!("simplify-add-sub-1-2"; "(+ ?x (- ?y ?x))" => "?y"),
        rw!("simplify-add-mul_negate-1"; "(+ (* ?x (- ?y)) ?z)" => "(- ?z (* ?x ?y))"),
        rw!("simplify-add-mul_negate-2"; "(+ (* (- ?y) ?x) ?z)" => "(- ?z (* ?y ?x))"),
        rw!("simplify-add-mul_negate-3"; "(+ ?z (* ?x (- ?y)))" => "(- ?z (* ?x ?y))"),
        rw!("simplify-add-mul_negate-4"; "(+ ?z (* (- ?y) ?x))" => "(- ?z (* ?y ?x))"),
        rw!("simplify-add-negate-2-1"; "(+ ?x (- (- ?y) ?z))" => "(- ?x (+ ?y ?z))"),
        rw!("simplify-add-negate-2-2"; "(+ (- (- ?y) ?z) ?x)" => "(- ?x (+ ?y ?z))"),
        rw!("simplify-add-sub-2-1"; "(+ (+ (- ?x ?y) ?z) ?y)" => "(+ ?x ?z)"),
        rw!("simplify-add-sub-2-2"; "(+ (+ ?z (- ?x ?y)) ?y)" => "(+ ?z ?x)"),
        rw!("simplify-add-sub-2-3"; "(+ ?x (+ (- ?y ?x) ?z))" => "(+ ?y ?z)"),
        rw!("simplify-add-sub-2-4"; "(+ ?x (+ ?z (- ?y ?x)))" => "(+ ?z ?y)"),
        rw!("simplify-add-sub-3-1"; "(+ (- ?x ?y) (- ?y ?z))" => "(- ?x ?z)"),
        rw!("simplify-add-sub-3-2"; "(+ (- ?x ?y) (- ?z ?x))" => "(- ?z ?y)"),
        rw!("simplify-add-sub-3-3"; "(+ (- ?x ?y) (+ ?y ?z))" => "(+ ?x ?z)"),
        rw!("simplify-add-sub-3-4"; "(+ (- ?x ?y) (+ ?z ?y))" => "(+ ?x ?z)"),
        rw!("simplify-add-sub-4-1"; "(+ ?x (- (- ?y ?x) ?z))" => "(- ?y ?z)"),
        rw!("simplify-add-sub-4-2"; "(+ (- (- ?x ?y) ?z) ?y)" => "(- ?x ?z)"),
        rw!("simplify-add-sub-4-3"; "(+ ?x (- ?y (+ ?x ?z)))" => "(- ?y ?z)"),
        rw!("simplify-add-sub-4-4"; "(+ ?x (- ?y (+ ?z ?x)))" => "(- ?y ?z)"),
        rw!("simplify-add-sub-4-5"; "(+ (- ?x (+ ?y ?z)) ?y)" => "(- ?x ?z)"),
        rw!("simplify-add-sub-4-6"; "(+ (- ?x (+ ?y ?z)) ?z)" => "(- ?x ?y)"),
        rw!("part-fold-zero_m-1"; "(+ ?x (- (- ?y) ?z))" => "(- ?x (+ ?y ?z))"),
        rw!("part-fold-zero_m-2"; "(+ (- (- ?x) ?y) ?z)" => "(- ?z (+ ?x ?y))"),
        rw!("part-fold-assoc-add-sub-3"; "(+ (- ?c0 ?x) ?c1)" => "(- (+ ?c0 ?c1) ?x)"), 
        
        rw!("assoc-balan-add-1"; "(+ (+ (+ ?x ?y) ?z)  ?t)" => "(+ (+ ?x ?y) (+ ?z  ?t))"),
        rw!("assoc-balan-add-2"; "(+ (+ ?z (+ ?x ?y))  ?t)" => "(+ (+ ?z ?x )(+ ?y  ?t))"),
        rw!("assoc-balan-add-3"; "(+ ?x (+ ?y (+ ?z  ?t)))" => "(+ (+ ?x ?y )(+ ?z  ?t))"),
        rw!("assoc-balan-add-4"; "(+ ?x (+ (+ ?z ?t) ?y))" => "(+ (+ ?x ?z) (+ ?t ?y))"),
        
        rw!("assoc-balan-add-sub-1"; "(+ (- (+ ?x ?y) ?z)  ?t)" => "(- (+ ?x ?y) (- ?z  ?t))"),
        rw!("assoc-balan-add-sub-2"; "(+ (- ?z (+ ?x ?y))  ?t)" => "(- (- ?z ?x) (- ?y  ?t))"),
        rw!("assoc-balan-add-sub-3"; "(+ (+ (- ?x ?y) ?z)  ?t)" => "(+ (- ?x ?y) (+ ?z  ?t))"),
        rw!("assoc-balan-add-sub-4"; "(+ (+ ?z (- ?x ?y))  ?t)" => "(- (+ ?z ?x) (- ?y  ?t))"),
        rw!("assoc-balan-add-sub-5"; "(+ (- (- ?x ?y) ?z)  ?t)" => "(- (- ?x ?y) (- ?z  ?t))"),
        rw!("assoc-balan-add-sub-6"; "(+ (- ?z (- ?x ?y))  ?t)" => "(+ (- ?z ?x) (+ ?y  ?t))"),
        rw!("assoc-balan-add-sub-7"; "(+ ?x (- ?y (+ ?z  ?t)))" => "(- (+ ?x ?y) (+ ?z  ?t))"),
        rw!("assoc-balan-add-sub-8"; "(+ ?x (- (+ ?z ?t) ?y))" => "(+ (+ ?x ?z) (- ?t ?y))"),
        rw!("assoc-balan-add-sub-9"; "(+ ?x (+ ?y (- ?z  ?t)))" => "(+ (+ ?x ?y)(- ?z  ?t))"),
        rw!("assoc-balan-add-sub-10"; "(+ ?x (+ (- ?z ?t) ?y))" => "(- (+ ?x ?z) (- ?t ?y))"),
        rw!("assoc-balan-add-sub-11"; "(+ ?x (- ?y (- ?z  ?t)))" => "(- (+ ?x ?y) (- ?z  ?t))"),
        rw!("assoc-balan-add-sub-12"; "(+ ?x (- (- ?z ?t) ?y))" => "(- (+ ?x ?z) (+ ?t ?y))"),
        rw!("fact-add-square-1"; "(+ (* ?x ?ct_y) (square ?ct_y))" => "(* (+ ?x ?ct_y) ?ct_y)"),
        rw!("fact-add-square-2"; "(+ (* ?ct_y ?x) (square ?ct_y))" => "(* ?ct_y (+ ?x ?ct_y))"),
        rw!("fact-add-square-3"; "(+ (square ?ct_y) (* ?x ?ct_y))" => "(* ?ct_y (+ ?ct_y ?x))"),
        rw!("fact-add-square-4"; "(+ (square ?ct_y) (* ?ct_y ?x))" => "(* ?ct_y (+ ?ct_y ?x))"),
        rw!("fact-add-1-1-1"; "(+ (* ?x ?ct_y) (* ?z ?ct_y))" => "(* (+ ?x ?z) ?ct_y)"),
        rw!("fact-add-1-2-1"; "(+ (* ?ct_x ?pt_y) (* ?ct_z ?pt_y))" => "(* (+ ?ct_x ?ct_z) ?pt_y)"),
        rw!("fact-add-2-1-1"; "(+ (* ?x ?ct_y) (* ?ct_y ?z))" => "(* (+ ?x ?z) ?ct_y)"),
        rw!("fact-add-2-2-1"; "(+ (* ?ct_x ?pt_y) (* ?pt_y ?ct_z))" => "(* (+ ?ct_x ?ct_z) ?pt_y)"),
        rw!("fact-add-3-1-1"; "(+ (* ?ct_y ?x) (* ?z ?ct_y))" => "(* ?ct_y (+ ?x ?z))"),
        rw!("fact-add-3-2-1"; "(+ (* ?pt_y ?ct_x) (* ?ct_z ?pt_y))" => "(* ?pt_y (+ ?ct_x ?ct_z))"),
        rw!("fact-add-4-1-1"; "(+ (* ?ct_y ?x) (* ?ct_y ?z))" => "(* ?ct_y (+ ?x ?z))"),
        rw!("fact-add-4-2-1"; "(+ (* ?pt_y ?ct_x) (* ?pt_y ?ct_z))" => "(* ?pt_y (+ ?ct_x ?ct_z))"),
        rw!("fact_one-add-1"; "(+ ?x (* ?x ?y))" => "(* ?x (+ ?y 1))"),
        rw!("fact_one-add-2"; "(+ ?x (* ?y ?x))" => "(* (+ ?y 1) ?x)"),
        rw!("fact_one-add-3"; "(+ (* ?x ?y) ?x)" => "(* ?x (+ ?y 1))"),
        rw!("fact_one-add-4"; "(+ (* ?y ?x) ?x)" => "(* (+ ?y 1) ?x)"),
        rw!("simplify-sub-negate"; "(- ?x (- ?y))" => "(+ ?x ?y)"),
        rw!("simplify-sub-mul_negate-1"; "(- ?z (* ?x (- ?y)))" => "(+ ?z (* ?x ?y))"),
        rw!("simplify-sub-mul_negate-2"; "(- ?z (* (- ?y) ?x))" => "(+ ?z (* ?y ?x))"),
        rw!("simplify-sub-1"; "(- (+ ?x ?y) ?x)" => "?y"),
        rw!("simplify-sub-2"; "(- (+ ?x ?y) ?y)" => "?x"),
        rw!("simplify-sub-3"; "(- ?x (+ ?x ?y))" => "(- ?y)"),
        rw!("simplify-sub-4"; "(- ?y (+ ?x ?y))" => "(- ?x)"),
        rw!("simplify-sub-5"; "(- (- ?x ?y) ?x)" => "(- ?y)"),
        rw!("assoc-balan-sub-1"; "(- (- (- ?x ?y) ?z) ?t)" => "(- (- ?x ?y) (+ ?z ?t))"),
        rw!("assoc-balan-sub-2"; "(- (- ?z (- ?x ?y)) ?t)" => "(+ (- ?z ?x) (- ?y ?t))"),
        rw!("assoc-balan-sub-3"; "(- ?x (- ?y (- ?z ?t)))" => "(- (- ?x ?y) (+ ?z ?t))"),
        rw!("assoc-balan-sub-4"; "(- ?x (- (- ?z ?t) ?y))" => "(+ (- ?x ?z) (+ ?t ?y))"),
        rw!("assoc-balan-sub-add-1"; "(- (+ (- ?x ?y) ?z) ?t)" => "(+ (- ?x ?y) (- ?z ?t))"),
        rw!("assoc-balan-sub-add-2"; "(- (+ ?z (- ?x ?y)) ?t)" => "(- (+ ?z ?x) (+ ?y ?t))"),
        rw!("assoc-balan-sub-add-3"; "(- (- (+ ?x ?y) ?z) ?t)" => "(- (+ ?x ?y) (+ ?z ?t))"),
        rw!("assoc-balan-sub-add-4"; "(- (- ?z (+ ?x ?y)) ?t)" => "(- (- ?z ?x) (+ ?y ?t))"),
        rw!("assoc-balan-sub-add-5"; "(- (+ (+ ?x ?y) ?z) ?t)" => "(+ (+ ?x ?y) (- ?z ?t))"),
        rw!("assoc-balan-sub-add-6"; "(- (+ ?z (+ ?x ?y)) ?t)" => "(+ (+ ?z ?x) (- ?y ?t))"),
        rw!("assoc-balan-sub-add-7"; "(- ?x (+ ?y (- ?z ?t)))" => "(- (- ?x ?y) (- ?z ?t))"),
        rw!("assoc-balan-sub-add-8"; "(- ?x (+ (- ?z ?t) ?y))" => "(+ (- ?x ?z) (- ?t ?y))"),
        rw!("assoc-balan-sub-add-9"; "(- ?x (- ?y (+ ?z ?t)))" => "(+ (- ?x ?y) (+ ?z ?t))"),
        rw!("assoc-balan-sub-add-10"; "(- ?x (- (+ ?z ?t) ?y))" => "(- (- ?x ?z) (- ?t ?y))"),
        rw!("assoc-balan-sub-add-11"; "(- ?x (+ ?y (+ ?z ?t)))" => "(- (- ?x ?y) (+ ?z ?t))"),
        rw!("assoc-balan-sub-add-12"; "(- ?x (+ (+ ?z ?t) ?y))" => "(- (- ?x ?z) (+ ?t ?y))"),
        rw!("fact-sub-square-1"; "(- (* ?x ?ct_y) (square ?ct_y))" => "(* (- ?x ?ct_y) ?ct_y)"),
        rw!("fact-sub-square-2"; "(- (* ?ct_y ?x) (square ?ct_y))" => "(* ?ct_y (- ?x ?ct_y))"),
        rw!("fact-sub-square-3"; "(- (square ?ct_y) (* ?x ?ct_y))" => "(* ?ct_y (- ?ct_y ?x))"),
        rw!("fact-sub-square-4"; "(- (square ?ct_y) (* ?ct_y ?x))" => "(* ?ct_y (- ?ct_y ?x))"),
        rw!("fact-sub-1-1-1-1"; "(- (* ?x ?ct_y) (* ?z ?ct_y))" => "(* (- ?x ?z) ?ct_y)"),
        rw!("fact-sub-1-1-1-4"; "(- (* ?x (- ?ct_y)) (* ?z ?ct_y))" => "(* (- (+ ?x ?z)) ?ct_y)"),
        rw!("fact-sub-1-1-2-1"; "(- (* ?ct_x ?pt_y) (* ?ct_z ?pt_y))" => "(* (- ?ct_x ?ct_z) ?pt_y)"),
        rw!("fact-sub-1-2-1-1"; "(- (* ?x ?ct_y) (* ?ct_y ?z))" => "(* (- ?x ?z) ?ct_y)"),
        rw!("fact-sub-1-2-1-4"; "(- (* ?x (- ?ct_y)) (* ?ct_y ?z))" => "(* (- (+ ?x ?z)) ?ct_y)"),
        rw!("fact-sub-1-2-2-1"; "(- (* ?ct_x ?pt_y) (* ?pt_y ?ct_z))" => "(* (- ?ct_x ?ct_z) ?pt_y)"),
        rw!("fact-sub-1-3-1-1"; "(- (* ?ct_y ?x) (* ?z ?ct_y))" => "(* ?ct_y (- ?x ?z))"),
        rw!("fact-sub-1-3-1-4"; "(- (* (- ?ct_y) ?x) (* ?z ?ct_y))" => "(* (- ?ct_y) (+ ?x ?z))"),
        rw!("fact-sub-1-3-2-1"; "(- (* ?pt_y ?ct_x) (* ?ct_z ?pt_y))" => "(* ?pt_y (- ?ct_x ?ct_z))"),
        rw!("fact-sub-1-3-2-4"; "(- (* (- ?pt_y) ?ct_x) (* ?ct_z ?pt_y))" => "(* (- ?pt_y) (+ ?ct_x ?ct_z))"),
        rw!("fact-sub-1-4-1-1"; "(- (* ?ct_y ?x) (* ?ct_y ?z))" => "(* ?ct_y (- ?x ?z))"),
        rw!("fact-sub-1-4-1-4"; "(- (* (- ?ct_y) ?x) (* ?ct_y ?z))" => "(* (- ?ct_y) (+ ?x ?z))"),
        rw!("fact-sub-1-4-2-1"; "(- (* ?pt_y ?ct_x) (* ?pt_y ?ct_z))" => "(* ?pt_y (- ?ct_x ?ct_z))"),
        rw!("fact-sub-1-4-2-4"; "(- (* (- ?pt_y) ?ct_x) (* ?pt_y ?ct_z))" => "(* (- ?pt_y) (+ ?ct_x ?ct_z))"),
        rw!("fact-sub-2-1-1"; "(- (+ ?u (* ?x ?ct_y)) (* ?z ?ct_y))" => "(+ ?u (* (- ?x ?z) ?ct_y))"),
        rw!("fact-sub-2-1-2"; "(- (+ ?u (* ?ct_x ?pt_y)) (* ?ct_z ?pt_y))" => "(+ ?u (* (- ?ct_x ?ct_z) ?pt_y))"),
        rw!("fact-sub-2-2-1"; "(- (+ ?u (* ?x ?ct_y)) (* ?ct_y ?z))" => "(+ ?u (* (- ?x ?z) ?ct_y))"),
        rw!("fact-sub-2-2-2"; "(- (+ ?u (* ?ct_x ?pt_y)) (* ?pt_y ?ct_z))" => "(+ ?u (* (- ?ct_x ?ct_z) ?pt_y))"),
        rw!("fact-sub-2-3-1"; "(- (+ ?u (* ?ct_y ?x)) (* ?z ?ct_y))" => "(+ ?u (* ?ct_y (- ?x ?z)))"),
        rw!("fact-sub-2-3-2"; "(- (+ ?u (* ?pt_y ?ct_x)) (* ?ct_z ?pt_y))" => "(+ ?u (* ?pt_y (- ?ct_x ?ct_z)))"),
        rw!("fact-sub-2-4-1"; "(- (+ ?u (* ?ct_y ?x)) (* ?ct_y ?z))" => "(+ ?u (* ?ct_y (- ?x ?z)))"),
        rw!("fact-sub-2-4-2"; "(- (+ ?u (* ?pt_y ?ct_x)) (* ?pt_y ?ct_z))" => "(+ ?u (* ?pt_y (- ?ct_x ?ct_z)))"),
        rw!("fact-sub-2-5-1"; "(- (- ?u (* ?x ?ct_y)) (* ?z ?ct_y))" => "(- ?u (* (+ ?x ?z) ?ct_y))"),
        rw!("fact-sub-2-5-2"; "(- (- ?u (* ?ct_x ?pt_y)) (* ?ct_z ?pt_y))" => "(- ?u (* (+ ?ct_x ?ct_z) ?pt_y))"),
        rw!("fact-sub-2-6-1"; "(- (- ?u (* ?x ?ct_y)) (* ?ct_y ?z))" => "(- ?u (* (+ ?x ?z) ?ct_y))"),
        rw!("fact-sub-2-6-2"; "(- (- ?u (* ?ct_x ?pt_y)) (* ?pt_y ?ct_z))" => "(- ?u (* (+ ?ct_x ?ct_z) ?pt_y))"),
        rw!("fact-sub-2-7-1"; "(- (- ?u (* ?ct_y ?x)) (* ?z ?ct_y))" => "(- ?u (* ?ct_y (+ ?x ?z)))"),
        rw!("fact-sub-2-7-2"; "(- (- ?u (* ?pt_y ?ct_x)) (* ?ct_z ?pt_y))" => "(- ?u (* ?pt_y (+ ?ct_x ?ct_z)))"),
        rw!("fact-sub-2-8-1"; "(- (- ?u (* ?ct_y ?x)) (* ?ct_y ?z))" => "(- ?u (* ?ct_y (+ ?x ?z)))"),
        rw!("fact-sub-2-8-2"; "(- (- ?u (* ?pt_y ?ct_x)) (* ?pt_y ?ct_z))" => "(- ?u (* ?pt_y (+ ?ct_x ?ct_z)))"),
        rw!("fact-sub-2-9-1"; "(- (+ (* ?x ?ct_y) ?u) (* ?z ?ct_y))" => "(+ ?u (* (- ?x ?z) ?ct_y))"),
        rw!("fact-sub-2-9-2"; "(- (+ (* ?ct_x ?pt_y) ?u) (* ?ct_z ?pt_y))" => "(+ ?u (* (- ?ct_x ?ct_z) ?pt_y))"),
        rw!("fact-sub-2-10-1"; "(- (+ (* ?x ?ct_y) ?u) (* ?ct_y ?z))" => "(+ ?u (* (- ?x ?z) ?ct_y))"),
        rw!("fact-sub-2-10-2"; "(- (+ (* ?ct_x ?pt_y) ?u) (* ?pt_y ?ct_z))" => "(+ ?u (* (- ?ct_x ?ct_z) ?pt_y))"),
        rw!("fact-sub-2-11-1"; "(- (+ (* ?ct_y ?x) ?u) (* ?z ?ct_y))" => "(+ ?u (* ?ct_y (- ?x ?z)))"),
        rw!("fact-sub-2-11-2"; "(- (+ (* ?pt_y ?ct_x) ?u) (* ?ct_z ?pt_y))" => "(+ ?u (* ?pt_y (- ?ct_x ?ct_z)))"),
        rw!("fact-sub-2-12-1"; "(- (+ (* ?ct_y ?x) ?u) (* ?ct_y ?z))" => "(+ ?u (* ?ct_y (- ?x ?z)))"),
        rw!("fact-sub-2-12-2"; "(- (+ (* ?pt_y ?ct_x) ?u) (* ?pt_y ?ct_z))" => "(+ ?u (* ?pt_y (- ?ct_x ?ct_z)))"),
        rw!("fact-sub-2-13-1"; "(- (- (* ?x ?ct_y) ?u) (* ?z ?ct_y))" => "(- (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-13-2"; "(- (- (* ?ct_x ?pt_y) ?u) (* ?ct_z ?pt_y))" => "(- (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-14-1"; "(- (- (* ?x ?ct_y) ?u) (* ?ct_y ?z))" => "(- (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-14-2"; "(- (- (* ?ct_x ?pt_y) ?u) (* ?pt_y ?ct_z))" => "(- (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-15-1"; "(- (- (* ?ct_y ?x) ?u) (* ?z ?ct_y))" => "(- (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-15-2"; "(- (- (* ?pt_y ?ct_x) ?u) (* ?ct_z ?pt_y))" => "(- (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-16-1"; "(- (- (* ?ct_y ?x) ?u) (* ?ct_y ?z))" => "(- (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-16-2"; "(- (- (* ?pt_y ?ct_x) ?u) (* ?pt_y ?ct_z))" => "(- (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-17-1"; "(- (* ?x ?ct_y) (+ ?u (* ?z ?ct_y)))" => "(- (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-17-2"; "(- (* ?ct_x ?pt_y) (+ ?u (* ?ct_z ?pt_y)))" => "(- (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-18-1"; "(- (* ?x ?ct_y) (+ ?u (* ?ct_y ?z)))" => "(- (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-18-2"; "(- (* ?ct_x ?pt_y) (+ ?u (* ?pt_y ?ct_z)))" => "(- (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-19-1"; "(- (* ?ct_y ?x) (+ ?u (* ?z ?ct_y)))" => "(- (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-19-2"; "(- (* ?pt_y ?ct_x) (+ ?u (* ?ct_z ?pt_y)))" => "(- (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-20-1"; "(- (* ?ct_y ?x) (+ ?u (* ?ct_y ?z)))" => "(- (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-20-2"; "(- (* ?pt_y ?ct_x) (+ ?u (* ?pt_y ?ct_z)))" => "(- (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-21-1"; "(- (* ?x ?ct_y) (- ?u (* ?z ?ct_y)))" => "(- (* (+ ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-21-2"; "(- (* ?ct_x ?pt_y) (- ?u (* ?ct_z ?pt_y)))" => "(- (* (+ ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-22-1"; "(- (* ?x ?ct_y) (- ?u (* ?ct_y ?z)))" => "(- (* (+ ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-22-2"; "(- (* ?ct_x ?pt_y) (- ?u (* ?pt_y ?ct_z)))" => "(- (* (+ ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-23-1"; "(- (* ?ct_y ?x) (- ?u (* ?z ?ct_y)))" => "(- (* ?ct_y (+ ?x ?z)) ?u)"),
        rw!("fact-sub-2-23-2"; "(- (* ?pt_y ?ct_x) (- ?u (* ?ct_z ?pt_y)))" => "(- (* ?pt_y (+ ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-24-1"; "(- (* ?ct_y ?x) (- ?u (* ?ct_y ?z)))" => "(- (* ?ct_y (+ ?x ?z)) ?u)"),
        rw!("fact-sub-2-24-2"; "(- (* ?pt_y ?ct_x) (- ?u (* ?pt_y ?ct_z)))" => "(- (* ?pt_y (+ ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-25-1"; "(- (* ?x ?ct_y) (+ (* ?z ?ct_y) ?u))" => "(- (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-25-2"; "(- (* ?ct_x ?pt_y) (+ (* ?ct_z ?pt_y) ?u))" => "(- (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-26-1"; "(- (* ?x ?ct_y) (+ (* ?ct_y ?z) ?u))" => "(- (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-26-2"; "(- (* ?ct_x ?pt_y) (+ (* ?pt_y ?ct_z) ?u))" => "(- (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-27-1"; "(- (* ?ct_y ?x) (+ (* ?z ?ct_y) ?u))" => "(- (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-27-2"; "(- (* ?pt_y ?ct_x) (+ (* ?ct_z ?pt_y) ?u))" => "(- (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-28-1"; "(- (* ?ct_y ?x) (+ (* ?ct_y ?z) ?u))" => "(- (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-28-2"; "(- (* ?pt_y ?ct_x) (+ (* ?pt_y ?ct_z) ?u))" => "(- (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-29-1"; "(- (* ?x ?ct_y) (- (* ?z ?ct_y) ?u))" => "(+ (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-29-2"; "(- (* ?ct_x ?pt_y) (- (* ?ct_z ?pt_y) ?u))" => "(+ (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-30-1"; "(- (* ?x ?ct_y) (- (* ?ct_y ?z) ?u))" => "(+ (* (- ?x ?z) ?ct_y) ?u)"),
        rw!("fact-sub-2-30-2"; "(- (* ?ct_x ?pt_y) (- (* ?pt_y ?ct_z) ?u))" => "(+ (* (- ?ct_x ?ct_z) ?pt_y) ?u)"),
        rw!("fact-sub-2-31-1"; "(- (* ?ct_y ?x) (- (* ?z ?ct_y) ?u))" => "(+ (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-31-2"; "(- (* ?pt_y ?ct_x) (- (* ?ct_z ?pt_y) ?u))" => "(+ (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("fact-sub-2-32-1"; "(- (* ?ct_y ?x) (- (* ?ct_y ?z) ?u))" => "(+ (* ?ct_y (- ?x ?z)) ?u)"),
        rw!("fact-sub-2-32-2"; "(- (* ?pt_y ?ct_x) (- (* ?pt_y ?ct_z) ?u))" => "(+ (* ?pt_y (- ?ct_x ?ct_z)) ?u)"),
        rw!("simplify-sub-2-1"; "(- (+ ?x ?y) (+ ?x ?z))" => "(- ?y ?z)"),
        rw!("simplify-sub-2-2"; "(- (+ ?x ?y) (+ ?z ?x))" => "(- ?y ?z)"),
        rw!("simplify-sub-2-3"; "(- (+ ?y ?x) (+ ?x ?z))" => "(- ?y ?z)"),
        rw!("simplify-sub-2-4"; "(- (+ ?y ?x) (+ ?z ?x))" => "(- ?y ?z)"),
        rw!("simplify-sub-3-1"; "(- (+ (+ ?x ?y) ?z) ?x)" => "(+ ?y ?z)"),
        rw!("simplify-sub-3-2"; "(- (+ (+ ?y ?x) ?z) ?x)" => "(+ ?y ?z)"),
        rw!("simplify-sub-3-3"; "(- (+ ?z (+ ?x ?y)) ?x)" => "(+ ?z ?y)"),
        rw!("simplify-sub-3-4"; "(- (+ ?z (+ ?y ?x)) ?x)" => "(+ ?z ?y)"),
        rw!("simplify-sub-4-1"; "(- ?x (+ ?y (- ?x ?z)))" => "(- ?z ?y)"),
        rw!("simplify-sub-4-2"; "(- ?x (+ (- ?x ?y) ?z))" => "(- ?y ?z)"),
        rw!("simplify-sub-4-3"; "(- (+ ?x (- ?y ?z)) ?y)" => "(- ?x ?z)"),
        rw!("simplify-sub-4-4"; "(- (+ (- ?x ?y) ?z) ?x)" => "(- ?z ?y)"),
        rw!("simplify-sub-5-1"; "(- ?x (+ ?y (+ ?x ?z)))" => "(- (+ ?y ?z))"),
        rw!("simplify-sub-5-2"; "(- ?x (+ ?y (+ ?z ?x)))" => "(- (+ ?y ?z))"),
        rw!("simplify-sub-5-3"; "(- ?x (+ (+ ?x ?y) ?z))" => "(- (+ ?y ?z))"),
        rw!("simplify-sub-5-4"; "(- ?x (+ (+ ?y ?x) ?z))" => "(- (+ ?y ?z))"),
        rw!("simplify-sub-6-1-0"; "(- (+ ?x ?y) (+ ?z (+ ?w ?x)))" => "(- ?y (+ ?z ?w))"),
        rw!("simplify-sub-6-2-0"; "(- (+ ?x ?y) (+ ?z (+ ?w ?y)))" => "(- ?x (+ ?z ?w))"),
        rw!("simplify-sub-6-3"; "(- (+ ?x ?y) (+ ?z (+ ?x ?w)))" => "(- ?y (+ ?z ?w))"),
        rw!("simplify-sub-6-4"; "(- (+ ?x ?y) (+ (+ ?x ?z) ?w))" => "(- ?y (+ ?z ?w))"),
        rw!("simplify-sub-6-5"; "(- (+ ?x ?y) (+ (+ ?x ?z) ?w))" => "(- ?y (+ ?z ?w))"),
        rw!("simplify-sub-6-6"; "(- (+ ?x ?y) (+ (+ ?y ?z) ?w))" => "(- ?x (+ ?z ?w))"),
        rw!("simplify-sub-6-7"; "(- (+ ?x ?y) (+ (+ ?z ?x) ?w))" => "(- ?y (+ ?z ?w))"),
        rw!("simplify-sub-6-8"; "(- (+ ?x ?y) (+ (+ ?z ?y) ?w))" => "(- ?x (+ ?z ?w))"),
        rw!("simplify-sub-6-1-1"; "(- (- ?x ?y) (+ ?x ?z))" => "(- (- ?y) ?z)"),
        rw!("simplify-sub-6-2-1"; "(- (- ?x ?y) (+ ?z ?x))" => "(- (- ?y) ?z)"),
        rw!("simplify-sub-7-1"; "(- (- (+ ?x ?y) ?z) ?x)" => "(- ?y ?z)"),
        rw!("simplify-sub-7-2"; "(- (- (+ ?x ?y) ?z) ?y)" => "(- ?x ?z)"),
        rw!("simplify-sub-8-1"; "(- (+ ?x (- ?y ?z)))" => "(- ?z (+ ?x ?y))"),
        rw!("simplify-sub-8-2"; "(- (+ (- ?x ?y) ?z))" => "(- ?y (+ ?x ?z))"),
        rw!("simplify-sub-9"; "(- (- (- ?x ?y) ?z) ?x)" => "(- (+ ?y ?z))"),
        rw!("fact_one-sub-1"; "(- (* ?x ?y) ?x)" => "(* ?x (- ?y 1))"),
        rw!("fact_one-sub-2"; "(- (* ?x ?y) ?y)" => "(* (- ?x 1) ?y)"),
        rw!("fact_one-sub-3"; "(- ?x (* ?x ?y))" => "(* ?x (- 1 ?y))"),
        rw!("fact_one-sub-4"; "(- ?x (* ?y ?x))" => "(* (- 1 ?y) ?x)"),
        rw!("fold-negate"; "(- (- ?x))" => "?x"),
        rw!("fold-negate-add"; "(- (- ?x ?y))" => "(- ?y ?x)"),
        rw!("fold-negate-sub"; "(- (- (- ?x) ?y))" => "(+ ?x ?y)"),
        rw!("part-fold-assoc-sub-1-1"; "(- (+ ?x ?c0) ?c1)" => "(+ ?x (- ?c0 ?c1))"),
        rw!("mul_1-1"; "(* 1 ?x)" => "?x"),
        rw!("mul_1-2"; "(* ?x 1)" => "?x"),
        rw!("mul_m1-1"; "(* ?x -1)" => "(- ?x)"),
        rw!("mul_m1-2"; "(* -1 ?x)" => "(- ?x)"),
        rw!("mul-to-square"; "(* ?x ?x)" => "(square ?x)"),
        rw!("part-fold-dist-add-1-4"; "(* (+ (* ?ct_x ?c0) ?c1) (+ (* ?ct_x ?c2) ?c3))" => "(+ (* ?ct_x (+ (* ?ct_x (* ?c0 ?c2)) (+ (* ?c0 ?c3) (* ?c1 ?c2)))) (* ?c1 ?c3))"),
        rw!("part-fold-dist-add-2"; "(* (+ ?ct_x ?c0) ?c1)" => "(+ (* ?ct_x ?c1) (* ?c0 ?c1))"),
        rw!("part-fold-dist-sub"; "(* (- ?c0 ?ct_x) ?c1)" => "(+ (* ?ct_x (- ?c1)) (* ?c0 ?c1))"),
        rw!("part-fold-dist-zero_m-1"; "(* (- ?x) ?y)" => "(* (- ?x) ?y)"),
        rw!("part-fold-dist-zero_m-2"; "(* ?x (- ?y))" => "(* (- ?x) ?y)"),
        rw!("part-fold-assoc-mul"; "(* (* ?x ?c0) ?c1)" => "(* ?x (* ?c0 ?c1))"),
        rw!("assoc-balan-mul-square-1"; "(* (* (* ?x ?y) ?x) ?z)" => "(* (square ?x) (* ?y ?z))"),
        rw!("assoc-balan-mul-square-2"; "(* (* ?x (* ?x ?y)) ?z)" => "(* (square ?x) (* ?y ?z))"),
        rw!("assoc-balan-mul-square-3"; "(* (* (* ?x ?y) ?y) ?z)" => "(* (* ?x ?z) (square ?y))"),
        rw!("assoc-balan-mul-square-4"; "(* (* ?y (* ?x ?y)) ?z)" => "(* (square ?y) (* ?x ?z))"),
        rw!("assoc-balan-mul-square-5"; "(* (* (* ?x ?y) ?z) ?x)" => "(* (square ?x) (* ?y ?z))"),
        rw!("assoc-balan-mul-square-6"; "(* ?x (* (* ?x ?y) ?z))" => "(* (square ?x) (* ?y ?z))"),
        rw!("assoc-balan-mul-square-7"; "(* (* (* ?x ?y) ?z) ?y)" => "(* (* ?x ?z) (square ?y))"),
        rw!("assoc-balan-mul-square-8"; "(* ?y (* (* ?x ?y) ?z))" => "(* (square ?y) (* ?x ?z))"),
        rw!("assoc-balan-mul-1"; "(* (* (* ?x ?y) ?z) ?t)" => "(* (* ?x ?y) (* ?z ?t))"),
        rw!("assoc-balan-mul-2"; "(* (* ?z (* ?x ?y)) ?t)" => "(* (* ?z ?x) (* ?y ?t))"),
        rw!("assoc-balan-mul-3"; "(* ?x (* ?y (* ?z ?t)))" => "(* (* ?x ?y) (* ?z ?t))"),
        rw!("assoc-balan-mul-4"; "(* ?x (* (* ?z ?t) ?y))" => "(* (* ?x ?z) (* ?t ?y))"), 
    ];
    return rules;
}

/************************************************************************************************/
/************************************************************************************************/

pub fn rotation_rules(slot_count: usize) -> Vec<Rewrite<FheLang, ConstantFold>> {
    let rules: Vec<Rewrite<FheLang, ConstantFold>> = vec![
        rw!("rotate_0"; "(<< ?x 0)" => "?x"),
        rw!("part-fold-rotate-add-1"; "(<< (+ ?x ?c0) ?n)" => "(+ (<< ?x ?n) (<< ?c0 ?n))"),
        rw!("part-fold-rotate-add-2"; "(<< (+ ?c0 ?x) ?n)" => "(+ (<< ?c0 ?n) (<< ?x ?n))"),
        rw!("part-fold-rotate-sub-1"; "(<< (- ?x ?c0) ?n)" => "(- (<< ?x ?n) (<< ?c0 ?n))"),
        rw!("part-fold-rotate-sub-2"; "(<< (- ?c0 ?x) ?n)" => "(- (<< ?c0 ?n) (<< ?x ?n))"),
        rw!("part-fold-rotate-mul-1"; "(<< (* ?x ?c0) ?n)" => "(* (<< ?x ?n) (<< ?c0 ?n))"),
        rw!("part-fold-rotate-mul-2"; "(<< (* ?c0 ?x) ?n)" => "(* (<< ?c0 ?n) (<< ?x ?n))"),
        rw!("fold-rotate"; "(<< (<< ?x ?n) ?m)" =>{format!("(<< ?x (% (+ ?m ?n) {}))",slot_count).parse::<Pattern<_>>().unwrap() } ),
        rw!("undo-nest-rotate-add-1"; "(<< (+ ?x (<< ?y ?n)) ?m)" => {format!("(+ (<< ?x ?m) (<< ?y (% (+ ?n ?m) {})))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-add-2"; "(<< (+ (<< ?y ?n) ?x) ?m)" => {format!("(+ (<< ?y (% (+ ?n ?m) {})) (<< ?x ?m))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-sub-1"; "(<< (- ?x (<< ?y ?n)) ?m)" => {format!("(- (<< ?x ?m) (<< ?y (% (+ ?n ?m)  {})))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-sub-2"; "(<< (- (<< ?y ?n) ?x) ?m)" => {format!("(- (<< ?y (% (+ ?n ?m) {})) (<< ?x ?m))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-mul-1"; "(<< (* ?x (<< ?y ?n)) ?m)" => {format!("(* (<< ?x ?m) (<< ?y (% (+ ?n ?m) {})))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("undo-nest-rotate-mul-2"; "(<< (* (<< ?y ?n) ?x) ?m)" => {format!("(* (<< ?y (% (+ ?n ?m) {})) (<< ?x ?m))",slot_count).parse::<Pattern<_>>().unwrap() }),
        rw!("merge-rotate-mul"; "(* (<< ?x ?n) (<< ?y ?n))" => "(<< (* ?x ?y) ?n)"),
        rw!("merge-rotate-sub"; "(- (<< ?x ?n) (<< ?y ?n))" => "(<< (- ?x ?y) ?n)"),

    ];
    return rules;
}
